# cori2 = NERSC Cori II KNL, static build, FFTW (single precision)

# ---------------------------------------------------------------------
#   module swap craype-haswell craype-mic-knl
#   module load fftw
#   module load craype-hugepages2M
#   Recommend using #SBATCH -S 2 for core specialization
# ---------------------------------------------------------------------

SHELL = /bin/sh

# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler

CC =		mpicxx
OPTFLAGS =      -O2
#CCFLAGS =	-g -openmp $(OPTFLAGS) -DLMP_INTEL_NO_TBB
CCFLAGS =	-g -fopenmp $(OPTFLAGS) -DLMP_INTEL_NO_TBB
#CCFLAGS =	-g -qopenmp -qno-offload \
#                -fno-alias -ansi-alias -restrict $(OPTFLAGS) -DLMP_INTEL_NO_TBB
SHFLAGS =	-fPIC
DEPFLAGS =	-M

LINK =		mpicxx
#LINKFLAGS =	-g -openmp $(OPTFLAGS)
LINKFLAGS =	-g -fopenmp $(OPTFLAGS)
#LINKFLAGS =	-g -qopenmp $(OPTFLAGS)
LIB =           
SIZE =		size

ARCHIVE =	ar
ARFLAGS =	-rc
SHLIBFLAGS =	-shared

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# see possible settings in Section 2.2 (step 4) of manual

LMP_INC =	#-DLAMMPS_GZIP -DLAMMPS_JPEG

# MPI library
# see discussion in Section 2.2 (step 5) of manual
# MPI wrapper compiler/linker can provide this info
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1
#MPI_PATH = /opt/intel/2017u4/impi/2017.3.196/intel64/lib/
MPI_PATH = 
MPI_LIB = 

# FFT library
# see discussion in Section 2.2 (step 6) of manaul
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

#FFT_INC =       -DFFT_FFTW3 -DFFT_SINGLE
#FFT_PATH = 
#FFT_LIB =       -lfftw3f
FFT_INC =      -DFFT_MKL -DFFT_SINGLE -I$(MKLROOT)
FFT_PATH =
#FFT_LIB =       -L$(MKLROOT) -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core
FFT_LIB =       -L$(MKLROOT) -lmkl_gf_ilp64 -lmkl_gnu_thread -lmkl_core

# JPEG and/or PNG library
# see discussion in Section 2.2 (step 7) of manual
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =       
JPG_PATH = 	
JPG_LIB =	#-ljpeg

# ---------------------------------------------------------------------
# build rules and dependencies
# do not edit this section

include	Makefile.package.settings
include	Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Link target

$(EXE):	$(OBJ)
	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
	$(SIZE) $(EXE)

# Library targets

lib:	$(OBJ)
	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)

shlib:	$(OBJ)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
        $(OBJ) $(EXTRA_LIB) $(LIB)

# Compilation rules

%.o:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

%.d:%.cpp
	$(CC) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $< > $@

%.o:%.cu
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

# Individual dependencies

depend : fastdep.exe $(SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1

fastdep.exe: ../DEPEND/fastdep.c
	cc -O -o $@ $<

sinclude .depend
